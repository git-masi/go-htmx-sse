package features

import (
	"github.com/git-masi/paynext/cmd/internal-server/components/layout"
	"github.com/git-masi/paynext/internal/.gen/model"
	"fmt"
)

templ Home(pp model.PayPeriods, prev []model.PayPeriods) {
	@layout.Page("Paynext") {
		<main class="box-border h-screen p-2 grid grid-cols-3 grid-rows-2">
			<section class="row-span-2 p-y-2 p-r-1">
				<div class="flex align-center justify-center">
					<img src="/static/payroll-clerk-pixel-art.png" alt="payroll clerk" class="w-300px h-300px m-b-2"/>
				</div>
				<p class="m-b-2">Welcome payroll clerk!</p>
				<p class="m-b-2">Add some workers to get started.</p>
				<p class="m-b-2">When workers are "active" you can add them to the payroll.</p>
				<p class="m-b-2">You can review your payroll report when the payroll is in the "final" status.</p>
			</section>
			<section class="col-span-2 row-span-1 grid grid-cols-2 gap-2 m-b-2">
				<div class="flex flex-col justify-between rd shadow-md shadow-gray p-2">
					<div>
						<h3 class="m-t-0 m-b-2">Workers</h3>
						<div
							data-worker-created-list
							hx-ext="sse"
							sse-connect="/workers/sse/created"
							sse-swap="WorkerCreated"
							hx-swap="beforeend"
							class="overflow-y-scroll box-border"
							style="height: calc(50vh - 54px - 3rem);"
						></div>
					</div>
					<div class="flex justify-end">
						<button
							hx-post="/workers/create"
							hx-swap="none"
						>
							New Worker
						</button>
					</div>
				</div>
				<div class="flex flex-col p-2 rd shadow-md shadow-gray">
					<h3 class="m-t-0 m-b-2">Reports</h3>
					<div class="grow overflow-y-scroll box-border">
						for _, ppp := range prev {
							<div class="flex">
								<span class="color-sky-800">{ ppp.StartDate[:10] }&nbsp;</span>
								to
								<span class="color-sky-800">&nbsp;{ ppp.EndDate[:10] }</span>
								<button
									type="button"
									hx-get={ fmt.Sprintf("/pay-periods/report/%d", ppp.ID) }
									hx-target="body"
									hx-swap="beforeend"
									class="m-l-2"
								>
									Report
								</button>
							</div>
						}
					</div>
				</div>
			</section>
			<section class="col-span-2 row-span-1 flex flex-col justify-between rd shadow-md shadow-gray p-2">
				<div>
					<h3 class="m-t-0 m-b-2">
						Pay period
						<span class="color-sky-800">&nbsp;{ pp.StartDate[:10] }&nbsp;</span>
						to
						<span class="color-sky-800">&nbsp;{ pp.EndDate[:10] }</span>
					</h3>
					<div
						class="w-full overflow-y-scroll"
						style="height: calc(50vh - 54px - 3rem);"
					>
						<table
							class="w-full m-b-2 box-border table-fixed"
						>
							<thead>
								<tr>
									<th scope="col" class="text-left">Date Of Work</th>
									<th scope="col" class="text-left">Worker ID</th>
									<th scope="col" class="text-left">Hours</th>
									<th scope="col" class="text-left">Pay Rate</th>
									<th scope="col" class="text-left">Status</th>
								</tr>
							</thead>
							<tbody
								data-earning-created-list
								hx-ext="sse"
								sse-connect="/earnings/sse/created"
								sse-swap="EarningCreated"
								hx-swap="beforeend"
							></tbody>
						</table>
					</div>
				</div>
				<div class="flex justify-end">
					<a
						href={ templ.SafeURL(fmt.Sprintf("/pay-periods/submit/%d", *pp.ID)) }
					>
						Submit Payroll
					</a>
				</div>
			</section>
		</main>
		<script>
			document.addEventListener("DOMContentLoaded", () => {
				// Supposedly HTMX has `scroll:bottom` which should handle this but it
				// wasn't working when I tested
				const wcl = document.querySelector("[data-worker-created-list]");
				if (wcl !== null) {
					const wclObserver = new MutationObserver((mutationsList) => {
						for (let mutation of mutationsList) {
							if (mutation.type === 'childList') {
								wcl.lastElementChild?.scrollIntoView({ behavior: 'smooth', block: 'end' });
							}
						}
					});
					wclObserver.observe(wcl, {childList:true})
				}

				const ecl = document.querySelector("[data-earning-created-list]");
				if (ecl !== null) {
					const eclObserver = new MutationObserver((mutationsList) => {
						for (let mutation of mutationsList) {
							if (mutation.type === 'childList') {
								ecl.lastElementChild?.scrollIntoView({ behavior: 'smooth', block: 'end' });
							}
						}
					});
					eclObserver.observe(ecl, {childList:true})
				}
			});
		</script>
	}
}
